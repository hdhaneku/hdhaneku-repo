#!/usr/bin/python3

import requests
import socket
from http.server import BaseHTTPRequestHandler, HTTPServer
import time
import json
from collections import OrderedDict

hostName = "172.23.193.200"
hostPort = 24001
FILEHANDLE = open("cw_alert_ipv4.txt", "w+")
class MyServer(BaseHTTPRequestHandler):

    #    GET is for clients geting the predi
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(bytes("<body><p>This is a test.</p>", "utf-8"))
        self.wfile.write(bytes("<p>You accessed path: %s</p>" % self.path, "utf-8"))
        self.wfile.write(bytes("</body></html>", "utf-8"))
    #    POST is for submitting data.
    def do_POST(self):

        #print( "incomming http: ", self.path )

        content_length = int(self.headers['Content-Length']) # <--- Gets the size of data
        post_data = self.rfile.read(content_length) # <--- Gets the data itself
        self.send_response(200)
        json_data = json.loads(post_data.decode('utf8'))
        json_data = json.dumps(json_data, indent=4)
        
        ## posting the message in webex teamspace ##
        
        url = "https://webexapis.com/v1/messages"
        dic1 = OrderedDict()
        dic1["roomId"] = "Y2lzY29zcGFyazovL3VzL1JPT00vNWQ4OTA5ODAtYWQzNC0xMWVkLWEwYTYtNDU3ZjA5ZTUxYTIz"
        dic1["text"] = str(json_data)
        payload = json.dumps(dic1)
        headers = {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer YjBjNzI3MzYtOTNhZC00M2YyLWIwNWUtODlhOWQyMDExNDJhZDU3NWQxZDItZTUw_PF84_1eb65fdf-9643-417f-9974-ad72cae0e10f'
            }
        response = requests.request("POST", url, headers=headers, data=payload)
        print(response.text)
        ## this completes the posting message ##
        
        if FILEHANDLE:
            FILEHANDLE.write(json_data)
            FILEHANDLE.flush()
        #client.close()

myServer = HTTPServer((hostName, hostPort), MyServer)
print(time.asctime(), "Server Starts - %s:%s" % (hostName, hostPort))

try:
    myServer.serve_forever()
except KeyboardInterrupt:
    FILEHANDLE.close()
    pass

myServer.server_close()
print(time.asctime(), "Server Stops - %s:%s" % (hostName, hostPort))
